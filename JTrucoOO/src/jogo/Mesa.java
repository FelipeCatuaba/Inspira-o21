/*
 * Mesa.java
 *
 * Created on 19/05/2011, 09:47:40
 * License: GPLv3
 */
package jogo;

import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

/**
 * Classe para representar a Mesa com as cartas
 * 
 * @author Emerson Ribeiro de Mello
 */
public class Mesa extends javax.swing.JPanel {

   private Principal pai;
   private Random sementeAleatoria; // usada no embaralhamento das cartas
   private ArrayList<Carta> baralho;
   private Carta cartaAMover; // Qual carta foi selecionada com o mouse
   private int coordCartaAMoverX; // Para onde mover a carta selecionada, eixo X
   private int coordCartaAMoverY; // Para onde mover a carta selecionada, eixo Y

   /**
    * Construtor
    * @param aThis -- JFrame principal para permitir a mesa interagir com os atributos do pai
    * @param b  -- Baralho que foi criado no Principal
    */
   public Mesa(Principal aThis, ArrayList<Carta> b) {
      initComponents();
      this.pai = aThis;
      this.baralho = b;
      this.sementeAleatoria = new Random();
      this.coordCartaAMoverX = -1;
      this.coordCartaAMoverY = -1;
      this.cartaAMover = null;
   }

   @Override
   public void paint(Graphics g) {
      super.paint(g);

      // Percorre todo baralho e redesenha todas as cartas na mesa
      for (Carta c : baralho) {
         c.desenhar(g, this);
      }

      g.dispose();
   }

   /**
    * Método usado para embaralhar o ArrayList
    */
   public void embaralhar() {
      // embaralha os elementos do ArrayList
      Collections.shuffle(baralho, this.sementeAleatoria);

      // Atualizando as coordenadas X e Y para as novas posicoes das cartas
      int px = pai.getPosicialInicialX();
      int py = pai.getPosicialInicialY();

      for (Carta carta : baralho) {
         carta.mover(px, py);
         px += 10;
         py += 0; // deixar todas alinhadas verticalmente
      }

      // invoca o método paint
      this.repaint();
   }

   /**
    * Vira todas as cartas do baralho de uma única vez
    */
   public void virarCartas() {
      for (Carta carta : baralho) {
         carta.virar();
      }
      this.repaint();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      setBackground(new java.awt.Color(1, 100, 0));
      addMouseListener(new java.awt.event.MouseAdapter() {
         public void mousePressed(java.awt.event.MouseEvent evt) {
            formMousePressed(evt);
         }
         public void mouseReleased(java.awt.event.MouseEvent evt) {
            formMouseReleased(evt);
         }
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            formMouseClicked(evt);
         }
      });
      addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
         public void mouseDragged(java.awt.event.MouseEvent evt) {
            formMouseDragged(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 640, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 403, Short.MAX_VALUE)
      );
   }// </editor-fold>//GEN-END:initComponents

   private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

      // Aconteceu um double click sobre uma carta, vire-a!
      if ((evt.getClickCount() > 1) && (this.acharCartaClicada(evt.getX(), evt.getY()))) {
         cartaAMover.virar();
         this.repaint();
      }

   }//GEN-LAST:event_formMouseClicked

   private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
      // O botão do mouse foi pressionado sobre uma carta?
      this.acharCartaClicada(evt.getX(), evt.getY());
   }//GEN-LAST:event_formMousePressed

   private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged

      // Verifica se o arrastar do mouse é sobre uma carta
      if (this.cartaAMover != null) {
         int mX = evt.getX() - this.coordCartaAMoverX;
         int mY = evt.getY() - this.coordCartaAMoverY;

         // evitando que a carta seja posicionada fora dos limites da tela
         mX = Math.max(mX, 0);
         mX = Math.min(mX, this.getWidth() - this.cartaAMover.getLargura());

         mY = Math.max(mY, 0);
         mY = Math.min(mY, this.getHeight() - this.cartaAMover.getAltura());

         //movendo a carta e redesenhando
         this.cartaAMover.mover(mX, mY);
         this.repaint();
      }

   }//GEN-LAST:event_formMouseDragged

   private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
      // limpando atributos de controle para movimentacao da carta
      this.cartaAMover = null;
      this.coordCartaAMoverX = -1;
      this.coordCartaAMoverY = -1;
   }//GEN-LAST:event_formMouseReleased

   /**
    * Verifica se o clique do mouse foi sobre alguma carta na mesa
    * @param mX -- Coordenada X do clique 
    * @param mY -- Coordenada Y do clique
    * @return true se realmente clicou sobre uma carta, false caso contrário
    */
   private boolean acharCartaClicada(int mX, int mY) {
      //invertendo os elementos no baralho para tratar o clique sobre
      // A ordem que foram desenhadas na mesa implica nas sobreposicoes das cartas
      // por isso é necessário percorrer o ArrayLista de trás para frente
      Collections.reverse(baralho);

      for (Carta carta : baralho) {
         if (carta.clicouDentro(mX, mY)) {
            cartaAMover = carta;
            coordCartaAMoverX = mX - carta.getX();
            coordCartaAMoverY = mY - carta.getY();
            //invertendo os elementos no baralho para tratar o clique sobre
            Collections.reverse(baralho);
            return true;
         }
      }
      //invertendo os elementos no baralho para a posição original
      Collections.reverse(baralho);
      return false; // nao clicou sobre qualquer carta na mesa
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   // End of variables declaration//GEN-END:variables
}
